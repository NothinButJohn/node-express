Without support for db, etc. minimal -- 

// package.json // 
{
  "name": "",
  "version": "1.0.0",
  "description": "",
  "main": "src/app.ts",
  "scripts": {
    "dev": "nodemon ./lib/app.js",
    "build": "nodemon --exec babel --presets @babel/preset-typescript --presets minify --extensions .ts ./src/app.ts --out-dir lib",
    "debug": "",
    "test": "echo \"Error: no test specified\" && exit 1",
    "seed": ""
  },
  "author": "nothinButJohn",
  "license": "ISC",
  "dependencies": {
    "@babel/runtime-corejs2": "^7.15.4",
    "express": "^4.17.1",
    "nodemon": "^2.0.13"
  },
  "devDependencies": {
    "@babel/cli": "^7.15.7",
    "@babel/core": "^7.15.8",
    "@babel/node": "^7.15.8",
    "@babel/plugin-transform-runtime": "^7.15.8",
    "@babel/plugin-transform-template-literals": "^7.14.5",
    "@babel/plugin-transform-typescript": "^7.15.8",
    "@babel/preset-env": "^7.15.8",
    "@babel/preset-typescript": "^7.15.0",
    "@babel/register": "^7.15.3",
    "@types/express": "^4.17.13",
    "@types/node": "^16.10.3",
    "babel-preset-minify": "^0.5.1",
    "typescript": "^4.4.3"
  }
}

// app.ts

const express = require('express')
const app = express()
const port = 3000

app.get('/', (req: any, res: any) => {
    res.send('Hello World!')
})

app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`)
})

module.exports = app;

// tsconfig.json

{
  "compilerOptions": {
    // Ensure that .d.ts files are created by tsc, but not .js files
    "declaration": true,
    "emitDeclarationOnly": true,
    // Ensure that Babel can safely transpile files in the TypeScript project
    "module": "commonjs",
    "esModuleInterop": true, /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "target": "es6",
    "strict": true,
    "noImplicitAny": true,
    "moduleResolution": "node",
    "sourceMap": true,
    "allowSyntheticDefaultImports": true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "outDir": "lib", /* Redirect output structure to the directory. */
    "baseUrl": ".",
    "paths": {
      "*": ["node_modules/*"]
    }
  },
  "include": ["src/**/*"]
}

// babel.config.json
{
  "presets": [["@babel/preset-env",
    {
      "targets": {
        "node": 4,
        "esmodules": true
      }
    }], "@babel/preset-typescript", "minify"],
  "plugins": [ "@babel/plugin-transform-runtime", "@babel/plugin-transform-typescript", "@babel/plugin-transform-template-literals"]
}





